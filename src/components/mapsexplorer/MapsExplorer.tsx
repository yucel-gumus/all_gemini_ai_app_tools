import React, { useEffect, useRef, useState } from 'react';
import { GoogleGenAI, FunctionDeclaration, Type } from '@google/genai';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import './MapsExplorer.css';

// Fix for default markers in Leaflet with Webpack
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

const systemInstructions = `D√ºnya hakkƒ±nda derin bir ilgiye sahip, yardƒ±msever bir seyahat rehberi gibi davran. G√∂revin, konu≈ümayla ilgili bir yeri haritada √∂nermek ve se√ßilen yer hakkƒ±nda ilgin√ß bilgiler vermek. ≈ûa≈üƒ±rtƒ±cƒ± ve keyifli √∂neriler sunmayƒ± hedefle: bilindik yerler yerine, az bilinen, sƒ±ra dƒ±≈üƒ± yerleri se√ß. Zararlƒ± veya g√ºvenli olmayan sorulara cevap verme.

√ñnce, bir yerin neden ilgin√ß olduƒüunu iki c√ºmleyle a√ßƒ±kla. Sonra, uygunsa, kullanƒ±cƒ±ya o yeri haritada g√∂stermek i√ßin 'recommendPlace( location, caption )' fonksiyonunu √ßaƒüƒ±r. Kullanƒ±cƒ± daha fazla bilgi isterse cevabƒ±nƒ± geni≈ületebilirsin.`;

const presets = [
  ['‚ùÑÔ∏è Soƒüuk', 'Ger√ßekten soƒüuk olan bir yer nerede?'],
  ['üóø Antik', 'Zengin antik tarihe sahip bir yer √∂ner'],
  ['üóΩ Metropol', 'ƒ∞lgin√ß b√ºy√ºk bir ≈üehir g√∂ster'],
  [
    'üåø Doƒüa',
    'G√ºzel doƒüasƒ± ve ye≈üilliƒüi olan bir yere g√∂t√ºr beni. Neden √∂zel?',
  ],
  [
    'üèîÔ∏è Uzak',
    'D√ºnyadan uzakla≈ümak istesem, d√ºnyanƒ±n en uzak yerlerinden biri neresi? Oraya nasƒ±l gidilir?',
  ],
  [
    'üåå Sƒ±radƒ±≈üƒ±',
    'Tamamen ger√ßek√ºst√º bir yer d√º≈ü√ºn, neresi? Ne onu bu kadar sƒ±radƒ±≈üƒ± yapƒ±yor?',
  ],
];

const recommendPlaceFunctionDeclaration: FunctionDeclaration = {
  name: 'recommendPlace',
  parameters: {
    type: Type.OBJECT,
    description: 'Shows the user a map of the place provided.',
    properties: {
      location: {
        type: Type.STRING,
        description: 'Give a specific place, including country name.',
      },
      caption: {
        type: Type.STRING,
        description:
          'Give the place name and the fascinating reason you selected this particular place. Keep the caption to one or two sentences maximum',
      },
    },
    required: ['location', 'caption'],
  },
};

const MapsExplorer: React.FC = () => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<L.Map | null>(null);
  const currentMarkerRef = useRef<L.Marker | null>(null);
  const [caption, setCaption] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);

  // Initialize map
  useEffect(() => {
    if (mapRef.current && !mapInstanceRef.current) {
      mapInstanceRef.current = L.map(mapRef.current).setView([20, 0], 2);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '¬© OpenStreetMap katkƒ±da bulunanlar'
      }).addTo(mapInstanceRef.current);
    }

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  const renderMap = (location: string) => {
    // Don't make API calls for invalid locations
    if (!location || location === '%' || location.trim() === '') {
      return;
    }

    if (!mapInstanceRef.current) return;

    // Add delay between requests to avoid rate limiting
    setTimeout(() => {
      // Use OpenStreetMap Nominatim service to geocode the location
      fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}&limit=1`, {
        headers: {
          'User-Agent': 'MapExplorer/1.0'
        }
      })
        .then(response => response.json())
        .then(data => {
          if (data && data.length > 0) {
            const lat = parseFloat(data[0].lat);
            const lon = parseFloat(data[0].lon);
            mapInstanceRef.current?.setView([lat, lon], 13);
            
            // Remove existing marker if any
            if (currentMarkerRef.current) {
              currentMarkerRef.current.remove();
            }
            
            // Add new marker
            if (mapInstanceRef.current) {
              currentMarkerRef.current = L.marker([lat, lon]).addTo(mapInstanceRef.current);
            }
          }
        })
        .catch(error => console.error('Konum bulunamadƒ±:', error));
    }, 1000);
  };

  const generateContent = async (prompt: string) => {
    setIsLoading(true);
    setCaption('');

    try {
      // API anahtarƒ±nƒ± environment variable'dan al
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
      if (!apiKey) {
        throw new Error('Gemini API key not found. Please set VITE_GEMINI_API_KEY in your environment variables.');
      }

      const ai = new GoogleGenAI({ vertexai: false, apiKey });

      const response = await ai.models.generateContentStream({
        model: 'gemini-2.0-flash-exp',
        contents: `${systemInstructions} ${prompt}`,
        config: {
          temperature: 2, // High temperature for answer variety
          tools: [{ functionDeclarations: [recommendPlaceFunctionDeclaration] }],
        },
      });

      for await (const chunk of response) {
        const fns = chunk.functionCalls ?? [];
        for (const fn of fns) {
          if (fn.name === 'recommendPlace' && fn.args) {
            const location = fn.args.location as string;
            const captionText = fn.args.caption as string;
            renderMap(location);
            setCaption(captionText);
          }
        }
      }
    } catch (error: any) {
      console.error('Bir hata olu≈ütu:', error);
      setCaption('Bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePresetClick = async (preset: string[]) => {
    await generateContent(preset[1]);
  };

  return (
    <div className="maps-explorer-container">
      <div className="maps-explorer-presets-container">
        <span className="maps-explorer-take-me-somewhere">
          {isLoading ? 'Harika bir yer arƒ±yorum...' : 'Beni bir yerlere g√∂t√ºr...'}
        </span>
        <div className="maps-explorer-presets">
          {presets.map((preset, index) => (
            <button
              key={index}
              onClick={() => handlePresetClick(preset)}
              disabled={isLoading}
              className="maps-explorer-preset-button"
            >
              {preset[0]}
            </button>
          ))}
        </div>
      </div>
      
      <div className="maps-explorer-map-container">
        <div ref={mapRef} className="maps-explorer-map" />
      </div>
      
      {caption && (
        <div className="maps-explorer-caption">
          {caption}
        </div>
      )}
    </div>
  );
};

export default MapsExplorer; 